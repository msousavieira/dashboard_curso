---
title: "Day 1 | Data manipulation with tidyverse"
author: "A. Peralta-Santos"
date: today
date-format: long
format:
  html:
    toc: true
    toc-location: left
execute:
  warning: false
title-block-style: default
editor: 
  markdown: 
    wrap: 72
---

## Setup

This ensures you have the default settings for all the R chunks of case

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  collapse    = TRUE,
  warning     = FALSE, # Whether to display warnings
  message     = FALSE, # Whether to display messages
  echo        = TRUE,  # In this case we want to see the code 
  eval        = TRUE   # Whether to evaluate the code and include its results
  )
```

#### Clean enviorment

```{r}
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.

```

#### Set seed

Set seed in important everytime R needs to do random calculations,
having the set seed ensure the results remain constant

```{r}
set.seed(123)

```

## Install and load library

Other way of doing the same thing, everytime you run a new session
libraries must be loaded

```{r}
#install.packages("tidyverse", repos = "http://cran.us.r-project.org")
#install.packages("readxl", repos = "http://cran.us.r-project.org")
#install.packages("lubridate", repos = "http://cran.us.r-project.org")
# install.packages("readxl") 


library(tidyverse)
library(readxl)
library(lubridate)


```

## Load data

From an excel

```{r}
# name of the new dataset <- read_excel("pathway")
# Use a generic pathway to ensure reproducibility 

inpatient_hospital <- read_excel("datasets/atividade_internamento_hospitalar.xlsx")

# Let's inspect the dataset 
#view(inpatient_hospital)

covid_inc <- read_csv("datasets/covid_inc.csv")



```

```{r}
hypoxia <- read_excel("datasets/hypoxia.xlsx")
```


```{r}
# Clean names 
# This command ensures all the variable names are with no capitals and spaces 
inpatient_hospital <- janitor::clean_names(inpatient_hospital)

covid_inc_limp <- janitor::clean_names(covid_inc)
```

## Tidyverse | Data manipulation

### Select

-   Select This argument enables the user to select variables, we have 7
    variables in our dataset. Let's check if we need all of them.

```{r}
# 1. The name of the final dataset
# 2. Name of the origin dataset 
# 3. pipe %>%
# 4. argument, in this case is select 

inpatient_hospital_lite <- inpatient_hospital %>% 
  select(periodo, 
         instituicao, 
         tipo_de_especialidade,
         doentes_saidos,
         dias_de_internamento) 

test <- inpatient_hospital %>% select(periodo, instituicao)

# We can also not select some variables
# STEPS
# 1.Create a vector with target variables 
# 2. use the logical argument ! to exclude the target variables

target <- c("regiao", "localizacao_geografica")


inpatient_hospital_exclude <- inpatient_hospital %>%
  select(!target)


```

### Filter

-   Filter Filter allows the user to filter values or strings within
    variables

```{r}
# 1. The name of the final dataset
# 2. Name of the origin dataset 
# 3. pipe %>%
# 4. argument, in this case is filter 
# 5. use a logical argument <, >, <=, ==

inpatient_hospital_less_1000 <- inpatient_hospital_lite %>%
  filter(dias_de_internamento<=1000)

# Let's inspect the dataset 
#view (inpatient_hospital_less_1000)

# We can use filter strings 
inpatient_hospital_surgery <- inpatient_hospital_lite %>%
  filter(tipo_de_especialidade=="Especialidade Cirurgica")

inpatient_hospital_medicine <- inpatient_hospital_lite %>%
  filter(tipo_de_especialidade=="Especialidade Médica")
# we can also combine several filters with logical arguments & (and) , | (or)

# We can use filter strings 
inpatient_hospital_surgery_less_500 <- inpatient_hospital_lite %>%
  filter(tipo_de_especialidade=="Especialidade Cirurgica" & 
           dias_de_internamento<=500)



```


### Mutate

-   Mutate The argument mutates creates a new variable

```{r}
# 1. The name of the final dataset
# 2. Name of the origin dataset 
# 3. pipe %>%
# 4. argument, in this case is mutate 
# 5. specify the name of the new variable 
# 6. add the function 


inpatient_hospital_lite <- inpatient_hospital_lite %>%
  mutate(length_patient=round((dias_de_internamento/doentes_saidos),1
                              )
         )

# Let's inspect the dataset 
view (inpatient_hospital_lite)


# We can also create a new variable with a fixed values 

inpatient_hospital_lite <- inpatient_hospital_lite %>%
  mutate(new_var=2,
         fonte="transparencia_sns",
         multiplicacao=dias_de_internamento*doentes_saidos) 
# Let's inspect the dataset 
view (inpatient_hospital_lite)
```

```{r}
inpatient_test <- inpatient_hospital_lite %>%
  select(
    fonte, periodo, length_patient
  )
```


### Dates

-   Dates Dealing with dates can be cumbersome, but it's an important
    skill to master

```{r}
# We need a trick to change the existing dataset in dates
# We will use paste0, that allows you to paste values into a variables 

inpatient_hospital_lite <- inpatient_hospital_lite %>%
  mutate(periodo=paste0(periodo, "-01")
         )

# Now we need to define the variable periodo as a date 


inpatient_hospital_lite <- inpatient_hospital_lite %>%
  mutate(periodo=as.Date(periodo)
         )

# we can now create new variables that are sub-products of dates, like month, year, week
# STEPS
# 1. Make sure you have a valid date variable, and defined as.Date 
# 2. use the argument(date variable)

inpatient_hospital_lite <- inpatient_hospital_lite %>%
  mutate(year=year(periodo), 
         month=month(periodo, label=FALSE), # we can add a label to the month
         week=week(periodo),
         weekday=wday(periodo, label=TRUE)
         )

```

### Summarise

-   Summarise we can also create summary variables

```{r}
# create a variable with all the number of patients out of the hospitals 
# STEPS
# 1. Make sure you have a valid date variable, and defined as.Date 
# 2. use the argument(date variable)

sum_patients <- inpatient_hospital_lite %>%
  summarise(all_patients=sum(doentes_saidos) 
            )
# ALERT
# We did not get a valid result because there are NA in the dataset, we need to specify to ignore the NA values
# To do that we use na.rm = TRUE

sum_patients <- inpatient_hospital_lite %>%
  summarise(all_patients=sum(doentes_saidos, na.rm = TRUE)
            )

# Now let's sum all the days as well 
sum_patients <- inpatient_hospital_lite %>%
  summarise(all_patients=sum(doentes_saidos, na.rm = TRUE),
            days_patients=sum(dias_de_internamento, na.rm = TRUE),
            mean_patient_days=mean(dias_de_internamento, na.rm = TRUE),
            sd_patient_days=sd(dias_de_internamento, na.rm = TRUE),
            max_patient_days=max(dias_de_internamento, na.rm = TRUE)
            )

```

### Group by

-   group by Sometimes we need to agregate or create new variables
    grouped by other variables. Let's do the same as the previous
    exercise but by year

```{r}
sum_patients_year <- inpatient_hospital_lite %>%
  group_by(year) %>%
  summarise(all_patients=sum(doentes_saidos, na.rm = TRUE),
            days_patients=sum(dias_de_internamento, na.rm =TRUE),max_patient_days=max(dias_de_internamento, na.rm = TRUE),
            min_patient_days=min(dias_de_internamento, na.rm = TRUE)
            )

# we can use more than one variable to group_by 

sum_patients_year_speciality <- inpatient_hospital_lite %>%
  group_by(year, tipo_de_especialidade) %>%
  summarise(all_patients=sum(doentes_saidos, na.rm = TRUE),
            days_patients=sum(dias_de_internamento, na.rm = TRUE),
            max_patient_days=max(dias_de_internamento, na.rm = TRUE),
            min_patient_days=min(dias_de_internamento, na.rm = TRUE)
            )
```

# Exercicio 
1. No dataset covid_inc
2. Media e desvio padrao da incidencia por ARS

```{r}
mean_covid <-covid_inc %>%
  group_by(ARS) %>% 
  summarise(mean_Incidencia=mean(Incidencia, na.rm=TRUE),
          SD_Incidencia=sd(Incidencia, na.rm=TRUE)
          )
```


  
### Arrange

-   Arrange with arrange we can order the values within a variable

```{r}
# from the lowest to the highest
sum_patients_year_speciality <- sum_patients_year_speciality %>%
  arrange(all_patients)

view(sum_patients_year_speciality)
# in reverse
sum_patients_year_speciality <- sum_patients_year_speciality %>%
  arrange(-all_patients)

```

-   Mixing arguments

```{r}
sum_patients_hospital <- inpatient_hospital_lite %>%
  filter(tipo_de_especialidade=="Especialidade Cirurgica",
         month=="12") %>%
  group_by(instituicao) %>%
  summarise(mean_patients=mean(doentes_saidos, na.rm = TRUE),
            sd_patients=sd(doentes_saidos, na.rm = TRUE),
            median_patients=median(doentes_saidos, na.rm = TRUE), 
            iqr_patients=IQR(doentes_saidos, na.rm = TRUE),
            )
```

### Advanced data wrangling principles

-   Lag and lead variables

We can create lag and lead variables

```{r}
# Our objective is to create montly variation of our outcome variables 
# Our dataset is organised by tipo_de_especialidade and instituicao
# And also with cumulative results by year
# We need to define the lag unit


inpatient_hospital_lite <-inpatient_hospital_lite %>%
  group_by(instituicao, tipo_de_especialidade, year) %>%
  mutate(doentes_saidos_lag = lag(doentes_saidos, 
                                         n = 1, 
                                      order_by = periodo ),
         
         dias_de_internamento_lag = lag(dias_de_internamento, 
                                         n = 1, 
                                      order_by = periodo )
  )

test <- inpatient_hospital_lite %>% 
  select(periodo, instituicao, tipo_de_especialidade, year, doentes_saidos, doentes_saidos_lag)
```

```{r}
hospital<-inpatient_hospital_lite %>%
  filter(instituicao=="Centro Hospitalar de Setúbal, EPE",
         tipo_de_especialidade=="Especialidade Cirurgica",
         year=="2015") %>%
  select(periodo, year, instituicao, doentes_saidos) %>%
  mutate(doentes_saidos_lag = lag(doentes_saidos, 
                                         n = 1, 
                                      order_by = periodo ),
         doentes_saidos_var=doentes_saidos-doentes_saidos_lag,
          doentes_saidos_var1= ifelse(is.na(doentes_saidos_var), doentes_saidos, doentes_saidos_var
  )
  )
```

Exercicio
1. Dataset inpatient_hospital_lite
2. So queremos metricas de hospitais universitarios 
3. Criar metricas de medias e SD dos doentes saidos so pra o mes de janeiro
4. Hospitais superiores a media global sao codificados como zero, os outros como 1



```{r}
tipo_esp01 <-inpatient_hospital_lite %>%
  select(tipo_de_especialidade)%>%
  mutate(
    esp01=ifelse(tipo_de_especialidade=="Especialidade Cirurgica", 0,1)
  )
```


Now let's create the monthly diference

```{r}

inpatient_hospital_lite <-inpatient_hospital_lite %>%
  mutate(doentes_saidos_var =doentes_saidos - doentes_saidos_lag,
         dias_de_internamento_var= dias_de_internamento - dias_de_internamento_lag
  )
    
```

### Ifelse

-   ifelse The base R ifelse works better than the ifelse from tidyverse

```{r}

# ifelse is a very useful argument
# STEPS
# ifelse(define condition, value when condition is TRUE, value when condition is FALSE)

inpatient_hospital_lite <- inpatient_hospital_lite %>% 
  dplyr::mutate( doentes_saidos_var= ifelse( is.na(doentes_saidos_var), doentes_saidos, doentes_saidos_var)  ,
                 
                 dias_de_internamento_var = ifelse(is.na(dias_de_internamento_var), dias_de_internamento, dias_de_internamento_var)
  )

test <- inpatient_hospital_lite %>% 
  select(periodo, instituicao, tipo_de_especialidade, year, doentes_saidos, doentes_saidos_lag, doentes_saidos_var)

```

```{r}
library(tidyverse)

inpatient_hospital_lite <- inpatient_hospital_lite %>% 
  mutate(especialidade01= ifelse(tipo_de_especialidade=="Especialidade Cirurgica", 0,1) 
  )
  
```


```{r}
hospitals <- unique(inpatient_hospital_lite$instituicao)
hospitals <- as.data.frame(hospitals)



```


### Case_when

```{r}
# Sometimes we need to change the categories within a variables
# We can use case_when to do that
view(sum_patients_hospital)

# We can see that Hospital de Vila Franca de Xira and Hospital de Braga have two diferent designations that need to be unified


inpatient_hospital_lite <- inpatient_hospital_lite %>%
  mutate(
    instituicao1 = case_when(
      instituicao =="Hospital de Vila Franca de Xira, PPP"  ~ "Hospital de Vila Franca de Xira, EPE",
      instituicao =="Hospital de Braga, PPP" ~ "Hospital de Braga, EPE"
    ),
    instituicao1 = ifelse(is.na(instituicao1), instituicao, instituicao1)
  )


inpatient_hospital_lite1 <- inpatient_hospital_lite %>%
  mutate(
    instituicao = case_when(
      instituicao =="Hospital de Vila Franca de Xira, PPP"  ~ "Hospital de Vila Franca de Xira, EPE",
      instituicao =="Hospital de Braga, PPP" ~ "Hospital de Braga, EPE",
      TRUE ~ instituicao
      )
  )

```

### Create a new variable

We will create a length of stay variable

```{r}
library(tidyverse)

inpatient_hospital_lite <- inpatient_hospital_lite %>%
  mutate(length_stay_var = dias_de_internamento_var / doentes_saidos_var, 
         length_stay_var = as.numeric(length_stay_var)
         ) %>%
  drop_na(length_stay_var) %>%
  filter(length_stay_var!="Inf")


inpatient_hospital_lite_only_pos <- inpatient_hospital_lite %>%
  filter(
    length_stay_var>=0
  )

```

Now let's create a more complex data wrangling, if the variable contains
an expression we can use grepl to capture and create a new variable


```{r}
library(tidyverse)
# Os valores de length_stay_var tem valores impossiveis
# Decidi eliminar valores abaixo de zero e acima de 150 porque me pareceu razoavel 

inpatient_hospital_lite <- inpatient_hospital_lite %>%
    mutate(
    tipo_instituicao = case_when(grepl("Universitário", instituicao, ignore.case = TRUE) ~ "University",
                                 grepl("Oncologia", instituicao, ignore.case = TRUE) ~ "Cancer hospital",
                                ),
    tipo_instituicao = replace_na(tipo_instituicao, "Hospital"),
    length_stay_var = ifelse(length_stay_var<=0 | length_stay_var>150, NA, length_stay_var),
    doentes_saidos_var = ifelse(doentes_saidos_var<=0 , NA, doentes_saidos_var)
  ) 
```

### Wide and Long tables

```{r}
inpatient_hospital_sum <- inpatient_hospital_lite %>%
  group_by(periodo, tipo_instituicao) %>%
  summarise(doentes_saidos_var=sum(doentes_saidos_var, na.rm = TRUE))
```

```{r}
# We can convert long and wide tables very easily 
# STEPS
# 1. Specify the category variable
# 2. Specify the numeric variable 

inpatient_hospital_wide <- inpatient_hospital_sum %>%
  pivot_wider(names_from = tipo_instituicao, values_from = doentes_saidos_var)

# Now back to long format
# STEPS
# 1. Specify the  variable that wont be changed
# 2. Specify the categorical variable name
# 3. Specify the numerical variable name 
inpatient_hospital_long <- inpatient_hospital_wide %>%
  pivot_longer(!periodo, names_to = "tipo_instituicao", values_to = "doentes_saidos_var")

```

### Saving the new data

```{r}
# fwrite function allows to write large csv files
# installed.packages("data.table", repos = "http://cran.us.r-project.org")

library(data.table)
library(here)
fwrite(inpatient_hospital_lite, file = here::here("output", "datasets",
                  paste0("inpatient_hospital_lite", ".csv")) 
       )
```

```{r}
library(haven)
# SPSS
write_sav(inpatient_hospital_lite, "output/datasets/inpatient_hospital_lite.sav")

# STATA
write_dta(inpatient_hospital_lite, "output/datasets/inpatient_hospital_lite.dta"
)
```


## Join datasets

```{r}
inpatient <- inpatient_hospital_lite %>%
  group_by(periodo, instituicao) %>%
  summarise(all_patients=sum(doentes_saidos, na.rm = TRUE))
            
```

```{r}
library(readr)
workers <- read_delim("datasets/trabalhadores_por_grupo_profissional.csv", 
    delim = ";", escape_double = FALSE, trim_ws = TRUE)

workers <- janitor::clean_names(workers)
```

```{r}
# https://data-lessons.github.io/gapminder-R/12-joins.html

workers <- workers %>%
  select(periodo, instituicao, total_geral) %>%
  mutate(periodo=paste0(periodo, "-01"),
         periodo=as.Date(periodo))

```

-   left_join dplyr::left_join(a, b, by = "x1") Join matching rows from b
    to a.

-   right_join dplyr::right_join(a, b, by = "x1") Join matching rows
    from a to b.

-   inner_join dplyr::inner_join(a, b, by = "x1") Join data. Retain only
    rows in both sets.

-   full_join dplyr::full_join(a, b, by = "x1") Join data. Retain all
    values, all rows.

-   dplyr::anti_join(a, b, by = "x1") All rows in a that do not have a
    match in b.

```{r}
inpatient_workers <- left_join(inpatient, workers, by=c("periodo", "instituicao") )
```

```{r}
anti_inpatient_workers <- anti_join(inpatient, workers, by=c("periodo", "instituicao") )
```

### Exercise

Exercise. Create the mean and median patients followed and days of
admission, by year for the cancer hospitals (grouped)

## THE END
